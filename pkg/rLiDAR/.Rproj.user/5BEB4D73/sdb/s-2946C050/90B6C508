{
    "contents" : "#**************************\n#return the rules of a tree\n#**************************\ngetConds<-function(tree){\n  #store all conditions into a list\n  conds<-list()\n  #start by the terminal nodes and find previous conditions\n  id.leafs<-which(tree$status==-1)\n  j<-0\n  for(i in id.leafs){\n    j<-j+1\n    prevConds<-prevCond(tree,i)\n    conds[[j]]<-prevConds$cond\n    while(prevConds$id>1){\n      prevConds<-prevCond(tree,prevConds$id)\n      conds[[j]]<-paste(conds[[j]],\" & \",prevConds$cond)\n      if(prevConds$id==1){\n        conds[[j]]<-paste(conds[[j]],\" => \",tree$prediction[i])\n        break()\n      }\n    }\n    \n  }\n  \n  return(conds)\n}\n\n#**************************\n#find the previous conditions in the tree\n#**************************\nprevCond<-function(tree,i){\n  if(i %in% tree$right_daughter){\n    id<-which(tree$right_daughter==i)\n    cond<-paste(tree$split_var[id],\">\",tree$split_point[id])\n  }\n  if(i %in% tree$left_daughter){\n    id<-which(tree$left_daughter==i)\n    cond<-paste(tree$split_var[id],\"<\",tree$split_point[id])\n  }\n  \n  return(list(cond=cond,id=id))\n}\n\n#remove spaces in a word\ncollapse<-function(x){\n  x<-sub(\" \",\"_\",x)\n  \n  return(x)\n}\n\n\ndata(iris)\nrequire(randomForest)\nmod.rf <- randomForest(Species ~ ., data=iris)\ntree<-getTree(mod.rf, k=1, labelVar=TRUE)\n#rename the name of the column\ncolnames(tree)<-sapply(colnames(tree),collapse)\nrules<-getConds(tree)\nprint(rules)\nprint(mod.rf)\n\n\n# Regression Tree Example\nlibrary(rpart)\n\n# grow tree \nfit <- rpart(ResponseV ~ lidarData.new[,\"Elev.P99\"] + lidarData.new[,\"Elev.CV\"],\n             rpart.control(minsplit=5, cp=0.001))\n?rpart\n(predV=predict(fit, lidarData.new[,varSelected]))\n\nrequire(hydroGOF)\ncor(ResponseV,predV)\nrmse(ResponseV,predV)\nrmseR<-(rmse(ResponseV,predV)/mean(ResponseV))*100 ;rmseR\n\n\nprintcp(fit) # display the results \nplotcp(fit) # visualize cross-validation results \nsummary(fit) # detailed summary of splits\n\n# create additional plots \npar(mfrow=c(1,2)) # two plots on one page \nrsq.rpart(fit) # visualize cross-validation results    \n\n# plot tree \nplot(fit, uniform=TRUE, \n     main=\"Regression Tree for Mileage \")\ntext(fit, use.n=TRUE, all=TRUE, cex=.8)\n\n# create attractive postcript plot of tree \npost(fit, file = \"c:/tree2.ps\", \n     title = \"Regression Tree for Mileage \")\n\npredlist = list(Elev.P99=\"C:\\\\Klabin\\\\LTK_processor_Klabin\\\\09_LTKprocessor_MA02BMR_mirandinha\\\\lyers\\\\Metrics\\\\Elev_P99_5METERS.asc\",\n                Elev.CV=\"C:\\\\Klabin\\\\LTK_processor_Klabin\\\\09_LTKprocessor_MA02BMR_mirandinha\\\\lyers\\\\Metrics\\\\ElevCV_5METERS.asc\")\n\noutlist = list(predict=\"C:\\\\Klabin\\\\LTK_processor_Klabin\\\\MA02BMR_mirandinha_VtCART.asc\")\nAsciiGridPredict(fit, predlist, outlist, xyptes = XTypes, lon = Lon, lat = Lat, rows = Rows, cols = Cols, nodata = Nodata, myPredFunc = MyPredFunc)\n",
    "created" : 1419932152685.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1744393350",
    "id" : "90B6C508",
    "lastKnownWriteTime" : 1420186673,
    "path" : "C:/08_Pinus_sp_PTA/.rpart.r",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled23"
    },
    "source_on_save" : false,
    "type" : "r_source"
}