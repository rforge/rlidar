{
    "contents" : "\t#'LiDAR 3D trees stand visualization\n#'\n#'@description Draws a 3D scatterplot for individual trees detected from LiDAR data.   \n#'\n#'@usage LiDARForestStand(crownshape = c(\"cone\", \"ellipsoid\", \"halfellipsoid\",\n#'                 \"paraboloid\", \"cylinder\"), CL = 4, CW = 8, HCB = 10, \n#'                   X = 0, Y = 0, dbh = 0.3, crowncolor = \"forestgreen\", \n#'                  stemcolor = \"chocolate4\", resolution=\"high\", mesh=TRUE) \n#'\n#'@param crownshape shape of individual tree crown: \"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\" or \"cylinder\". Default is \"halfellipsoid\".\n#'@param CL crown length\n#'@param CW crown diameter\n#'@param HCB height at canopy base\n#'@param X x-coordinate\n#'@param Y y-coordinate.\n#'@param dbh diameter at breast height (1.73 m)\n#'@param crowncolor crown color\n#'@param stemcolor stem color\n#'@param resolution crown resolution: \"low\", \"medium\" and \"high\"\n#'@param mesh Logical, if TRUE (default) returns a tree crown mesh model, and if FALSE returns a tree crown line mode.  \n#'@return Returns a 3-D scatterplot of the individual trees as identified automatically from the LiDAR.   \n#'@author Carlos Alberto Silva and Remko Duursma. Uses code by Remko Duursma (\\emph{Maeswrap} package,see \\code{\\link[Maeswrap]{Plotstand}}).\n#'@references \\url{http://maespa.github.io/}\n#'@examples\n#'\\dontrun{\n#'\n#'#=======================================================================#\n#'# EXAMPLE 01: Plotting single trees\n#'#=======================================================================#\n#'\n#'# cone crown shape\n#'open3d() \n#'LiDARForestStand(crownshape = \"cone\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'            stemcolor = \"chocolate4\", resolution=\"high\", mesh=TRUE) \n#'                        \n#'# ellipsoid crown shape \n#'open3d()\n#'LiDARForestStand(crownshape = \"ellipsoid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'            stemcolor = \"chocolate4\", resolution=\"high\", mesh=TRUE) \n#'                        \n#'# halfellipsoid crown shape \n#'open3d()\n#'LiDARForestStand(crownshape = \"halfellipsoid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'            stemcolor = \"chocolate4\", resolution=\"high\", mesh=TRUE) \n#'                        \n#'# paraboloid crown shape \n#'open3d()\n#'LiDARForestStand(crownshape = \"paraboloid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'            stemcolor = \"chocolate4\", resolution=\"high\", mesh=TRUE)\n#'\n#'# cylinder crown shape \n#'open3d()\n#'LiDARForestStand(crownshape = \"cylinder\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'            stemcolor = \"chocolate4\", resolution=\"high\", mesh=TRUE)\n#'                        \n#'# Set the shape=FALSE \n#'open3d()\n#'LiDARForestStand(crownshape = \"paraboloid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'            stemcolor = \"chocolate4\", resolution=\"high\", mesh=FALSE)\n#' \n#'#=======================================================================#                                           \n#'#EXAMPLE 02: Plotting a forest plantation stand in virtual 3-D space\n#'#=======================================================================#\n#' \n#'# Set the dimensions of the displayed forest stand\n#'xlength<-30 # x length\n#'ylength<-20 # y length\n#'\n#'# Set the space between trees\n#'sx<-3 # x space length\n#'sy<-2 # y space length\n#'\n#'# Tree location grid\n#'XYgrid <- expand.grid(x = seq(1,xlength,sx), y = seq(1,ylength,sy))\n#'\n#'# Get the number of trees\n#'Ntrees<-nrow(XYgrid)\n#'\n#'# Plot a virtual Eucalyptus forest plantation stand using the halfellipsoid tree crown shape\n#'\n#'# Set stand trees parameters\n#'meanHCB<-5  # mean of the height at canopy base\n#'sdHCB<-0.1  # standard deviation of the height at canopy base\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # height at canopy base\n#'CL<-HCB     # tree crown height\n#'CW<-HCB*0.6 # tree crown diameter\n#'\n#'open3d()    # open a rgl window\n#'\n#'# Plotting the stand\n#'for( i in 1:Ntrees){\n#'  LiDARForestStand(crownshape = \"halfellipsoid\", CL = CL[i], CW = CW[i], \n#'              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, \n#'              crowncolor = \"forestgreen\", stemcolor = \"chocolate4\", \n#'              resolution=\"high\", mesh=TRUE) \n#'}\n#'                            \n#'# Add other plot parameters\n#'axes3d(c(\"x-\", \"x-\", \"y-\", \"z\"), col=\"gray\")       # axes\n#'title3d(xlab = \"X Coord\", ylab = \" Y Coord\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(0, 0, -1, 0.001, col=\"gray\", alpha=0.7)   # set a terrain plane\n#'\n#'\n#'# Plotting a virtual single-species forest plantation stand using \"cone\" tree crown shape\n#'\n#'# Set parameters f trees growing within the virtual stand\n#'meanHCB<-3  # mean of the height at canopy base\n#'sdHCB<-0.1  # standard deviation of the height at canopy base\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # height at canopy base\n#'CL<-HCB*2.0 # tree crown height\n#'CW<-HCB*1.3 # tree crown diameter\n#'\n#'open3d() # open a rgl window\n#'# Plot stand\n#'for( i in 1:Ntrees){\n#'  LiDARForestStand(crownshape = \"cone\", CL = CL[i], CW = CW[i], \n#'              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, \n#'              crowncolor = \"forestgreen\", stemcolor = \"chocolate4\", \n#'              resolution=\"high\", mesh=TRUE) \n#'}\n#'                            \n#'# Add other plot parameters\n#'axes3d(c(\"x-\", \"x-\", \"y-\", \"z\"), col=\"gray\")       # axes\n#'title3d(xlab = \"X Coord\", ylab = \" Y Coord\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(0, 0, -1, 0.001, col=\"gray\", alpha=0.7)   # set a terrain plane\n#'\n#'#=======================================================================#\n#'# EXAMPLE 03: Plotting a virtual mixed forest stand\n#'#=======================================================================#\n#'\n#'# 01. Plot different trees species in the stand with different crown shapes \n#'\n#'# Set the number of trees\n#'Ntrees<-80 \n#'\n#'# Set the trees locations\n#'xcoord<-sample(1:100, Ntrees)  # x coord\n#'ycoord<-sample(1:100, Ntrees)  # y coord\n#'\n#'# Set a location grid of trees \n#'XYgrid<-cbind(xcoord,ycoord)\n#'\n#'# Plot the location of the trees\n#'plot(XYgrid, main=\"Tree location\")\n#'\n#'meanHCB<-7 # mean of the height at canopy base\n#'sdHCB<-3   # standard deviation of height at canopy base\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # height at canopy base\n#'crownshape<-sample(c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \n#'                   \"paraboloid\"), Ntrees, replace=T) # tree crown shape \n#'CL<-HCB*1.3 # tree crown height\n#'CW<-HCB     # tree crown diameter\n#'\n#'open3d() # open a rgl window\n#'# Plot stand\n#'\n#'for( i in 1:Ntrees){\n#'  LiDARForestStand(crownshape = crownshape[i], CL = CL[i], CW = CW[i], \n#'              HCB = HCB[i], X = as.numeric(XYgrid[i,1]), Y = as.numeric(XYgrid[i,2]), \n#'              dbh = 0.4, crowncolor = \"forestgreen\", stemcolor = \"chocolate4\", \n#'              resolution=\"high\", mesh=TRUE)\n#'}\n#'                          \n#'# Add other plot parameters\n#'axes3d(c(\"x-\", \"x-\", \"y-\", \"z\"), col=\"gray\")       # axes\n#'title3d(xlab = \"X Coord\", ylab = \" Y Coord\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(0, 0, -1, 0.001, col=\"gray\", alpha=0.7)   # set a terrain plane\n#'\n#'\n#'# 02. Plot different tree height in the stand using different crown colors\n#'\n#'# Set the number of trees\n#'Ntrees<-80 \n#'\n#'# Set the tree locations\n#'xcoord<-sample(1:100, Ntrees) # x coord\n#'ycoord<-sample(1:100, Ntrees) # y coord\n#'\n#'# Set a location grid of trees \n#'XYgrid<-cbind(xcoord,ycoord)\n#'\n#'# plot the location of the trees\n#'plot(XYgrid, main=\"Tree location\")\n#'\n#'meanHCB<-7 # mean of the height at canopy base\n#'sdHCB<-3   # standard deviation of the height at canopy base\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # height at canopy base\n#'crownshape<-sample(c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\"), \n#'                   Ntrees, replace=T) # tree crown shape \n#'CL<-HCB*1.3 # tree crown height\n#'CW<-HCB     # tree crown diameter\n#'\n#'# Plot tree height based on the HCB quantiles\n#'HCBq<-quantile(HCB) # HCB quantiles\n#'crowncolor<-NA*(1:Ntrees) # set an empty crowncolor vector\n#'\n#'# classify trees by HCB quantile\n#'for (i in 1:Ntrees){\n#'  if (HCB[i] <= HCBq[2]) {crowncolor[i]<-\"red\"}                        # group 1\n#'  if (HCB[i] > HCBq[2] & HCB[i] <= HCBq[3] ) {crowncolor[i]<-\"blue\"}   # group 2\n#'  if (HCB[i] > HCBq[3] & HCB[i] <= HCBq[4] ) {crowncolor[i]<-\"yellow\"} # group 3\n#'  if (HCB[i] >= HCBq[4]) {crowncolor[i]<-\"dark green\"}                 # group 4\n#'}\n#'    \n#'open3d() # open a rgl window\n#'\n#'# Plot stand\n#'for(i in 1:Ntrees){  \n#'  LiDARForestStand(crownshape = crownshape[i], CL = CL[i], CW = CW[i], \n#'    HCB = HCB[i], X = as.numeric(XYgrid[i,1]), Y = as.numeric(XYgrid[i,2]), \n#'    dbh = 0.4, crowncolor = crowncolor[i],stemcolor = \"chocolate4\", \n#'    resolution=\"high\", mesh=TRUE) \n#'}\n#'    \n#'# Add other plot parameters\n#'axes3d(c(\"x-\", \"x-\", \"y-\", \"z\"), col=\"gray\")       # axes\n#'title3d(xlab = \"X Coord\", ylab = \" Y Coord\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(0, 0, -1, 0.001, col=\"gray\", alpha=0.7)   # set a terrain plane\n#'\n#'}\n#'\n#'@export\n#'@importFrom geometry convhulln\n#'@importFrom rgl plot3d open3d bg3d rgl.triangles \nLiDARForestStand<-function(crownshape = c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\", \"cylinder\"), \n                        CL = 4, CW = 8,HCB = 10, X = 0, Y = 0, dbh = 0.3, crowncolor = \"forestgreen\", \n                       stemcolor = \"chocolate4\", resolution=\"high\",mesh=TRUE) \n{\n  \n  if (crownshape!=\"cone\"& crownshape!=\"ellipsoid\"&crownshape!=\"halfellipsoid\"&crownshape!=\"paraboloid\"&crownshape!=\"cylinder\") {stop(\"The crownshape parameter is invalid. Please, use one of this crownshape types: 'cone','ellipsoid','halfellipsoid','paraboloid','cylinder'\")}\n  if (class(HCB)!=\"numeric\") {stop(\"The HCB parameter is invalid. It is not a numeric parameter\")}\n  if (class(X)!=\"numeric\") {stop(\"The X parameter is invalid. It is not a numeric parameter\")}\n  if (class(Y)!=\"numeric\") {stop(\"The Y parameter is invalid. It is not a numeric parameter\")}\n  if (class(dbh)!=\"numeric\") {stop(\"The HCB parameter is invalid. It is not a numeric parameter\")}\n  if (resolution!=\"high\" & resolution!=\"medium\" & resolution!=\"low\") {stop(\"The resolution parameter is invalid. It must to be 'high', 'median' or 'low'\")}\n  if (class(mesh)!=\"logical\") {stop(\"The shape parameter is invalid. It must to be a TRUE or FALSE logical statement\")}\n\n  \n  if (resolution==\"low\"){nz<-15;nalpha<-15}\n  if (resolution==\"medium\"){nz<-25;nalpha<-25}\n  if (resolution==\"high\"){nz<-40;nalpha<-40}\n  \n  if (mesh==TRUE) {\n    \n  shape <- match.arg(crownshape)\n\n  H <- HCB + CL\n  dbase <- dbh * (H/(H - 1.3))\n  if (!is.finite(dbase)) \n    dbase <- dbh\n  \n  \n  m1 <- coord3dshape(shape, CW = CW, CL = CL, z0 = HCB, x0 = X, \n                                        y0 = Y, nz = nz, nalpha = nalpha)\n  m2 <- coord3dshape(\"cone\", CW = dbase, CL = H, z0 = 0, x0 = X, \n                      y0 = Y, nz = nz, nalpha = nalpha)\n  \n  interpol(m1, col = crowncolor)\n  interpol(m2, col = stemcolor)\n  \n  } else {\n    \n    TreesModel(crownshape=crownshape, CW = CW, CL = CL, z0 = 0,HCB=HCB, x0 = X, \n                     y0 = Y, nz = nz, nalpha = nalpha, dbh = dbh,crowncolor = crowncolor, \n               stemcolor = stemcolor)\n  }\n  \n  \n}\n\n",
    "created" : 1425976713312.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2029915158",
    "id" : "6B0B025F",
    "lastKnownWriteTime" : 1425971431,
    "path" : "~/rLiDAR/rLiDAR/R/LiDARForestStand.R",
    "project_path" : "R/LiDARForestStand.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}