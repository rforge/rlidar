{
    "contents" : "#--------------------------------------------------------------------------------------------------\n# SILVA, C. A.\n# Forester and Master's degree\n# PhD Student at University of Idaho\n# College of Natural Resources \n# Moscow, Idaho - USA\n# carlos_engflorestal@outlook.com\n# csilva@uidaho.edu \n# Skype: Flowds\n#--------------------------------------------------------------------------------------------------\n\n#----------------------------------------------------------------------------------------------------------###\n# 02 - Import field biomass\n#----------------------------------------------------------------------------------------------------------###\nFieldInventory <- readShapePoints(\"C:\\\\00_CFJ_paper\\\\01_Processing\\\\03_TreeDetection\\\\TreeFieldSelected_xy.shp\")\n\n# convert shp to dataframe\nFieldInventory<-as.data.frame(FieldInventory)\nhead(FieldInventory)\n\n# Field variables\nHt<-FieldInventory$mHmax\nDBH<-FieldInventory$DBH\nBA<-FieldInventory$BA\nCA<-FieldInventory$CA\nCR<-FieldInventory$CR\nVob<-FieldInventory$Vob1\nVib<-FieldInventory$Vib1\n\n# LiDAR variables\n\nLiDAR_Ht<-FieldInventory$Hmax_1\nHmeanL<-FieldInventory$height\nCAL<-pi*(sqrt(FieldInventory$Shape_Area/pi)^2)\nCAL<-FieldInventory$Shape_Area\nsummary(CAL)\n\n#----------------------------------------------------------------------------------------------------------###\n# 03 -  function to plot hist and correlation graphics\n#----------------------------------------------------------------------------------------------------------###\n \nPlothist<-function(data,lyt) {\n  graphics.off()\n  # *Create scatter plots among PDSI series from multiple points*\n  \n  alpha = 0.05 # If the probability of an observed correlation is \n  # less than alpha, then a regression line will be\n  # fit to the data. \n  \n  # This code, if uncommented, will select random locations:\n  # index = unidrnd(length(gridId),4,1);     \n  \n  varName = colnames(data)           # varName will be used to label the plots. \n  # scatter plots.\n  n = length(varName)         # Number of columns in X, or number of variables.\n  \n  win.graph(10,9)\n  \n  # Create layout for figure panels. Panels will be added to figure in the\n  # order of the numbers in the matrix.\n  lytmtx = matrix(lyt,nrow=n,ncol=n,byrow=T)\n  layout(lytmtx) # Set the layout of the figure using the 'layout' function\n  par(mar=c(2,4,2,2))\n  for (j in 1:n){ # For each variable\n    x = data[,j] # Define x as the values in column j.\n    for (i in 1:n){ # For each variable\n      if (i <= j){ # If i is less than j...\n        y = data[,i]; # Define y as the values in column i\n        \n        if (i != j){\n          \n          plot(x,y,col=rgb(0.5,0.5,0.5),\n               main=\"\",\n               xlab=\"\",\n               ylab=\"\") # Plot x vs. y.\n          index2 = which(as.logical((x > -999) * (y > -999))) # Index for non-NaN values.\n          stats = cor.test(x,y) # Correlate x and y, and return\n          # correlation coefficient, r,\n          # and the probability of Type I\n          # error, p.\n          \n          r = as.numeric(stats$estimate) # Correlation\n          p = as.numeric(stats$p.value) #probability of Type I error, p\n        }\n        if (j == i){       # If i and j are the same, then make a \n          # histogram instead of a scatter plot. \n          hist(x,     # Histogram variables.\n               col=rgb(0.5,0.5,0.5),\n               main = \"\",\n               ylab=\"\",\n               xlab=\"\")\n          \n          \n        } else if (p < alpha){  # If the probability of Type-I error is\n          # less than alpha, then plot r and the\n          # least-squares line of best fit. \n          text(min(x)+2*(range(x,na.rm=T)[2] - range(x,na.rm=T)[1])/10, # Use range function to dynamically\n               max(y)-2*(range(y,na.rm=T)[2] - range(y,na.rm=T)[1])/10,   # place text in each figure.\n               paste(\"r = \",round(r,digits = 2),sep=\"\"),\n               cex=0.9)\n          abline(lm(y~x)) # Add least squares line using 'abline' and 'lm' functions\n        }\n        if (i == 1 & j != 1){       # If i == 1 (first column), add y-axis label.\n          title(ylab = paste(varName[j]))\n        }\n      }\n      \n    }\n    title(paste(varName[j]))   # Add a title for each column. \n  }\n}\n\n\nPlotData<-cbind(Ht,BA,CA,Vob,Vib,LiDAR_Ht)\n\n# run the function\nwin.graph(10,9)\nlyt = c(1, 6, 6,7,7,7,\n        2, 6, 6,7,7,7,\n        3, 4, 5,7,7,7)\n\nlytmtx = matrix(lyt,nrow=3,ncol=6,byrow=T)\nlayout(lytmtx)\npar(mar=c(4,4,2,0))\n\nfor ( i in 1:6){\n  if (i==1 ) {xlab=\"Height (m)\"}\n  if (i==2 ) {xlab=\" Basal area (m2)\"}\n  if (i==3 ) {xlab=\" Canopy projected area (m2)\"}\n  if (i==4 ) {xlab=\" Stem volume outside-bark  (m3)\"}\n  if (i==5 ) {xlab=\" Stem volume inside-bark (m3)\"}\n  if (i==6) {xlab=\"LiDAR Height (m)\"}\nhist(PlotData[,i], prob=T, main=colnames(PlotData)[i], col='forestgreen',\n     #xlim=c(0,max(PlotData[,i])*1.1),\n     ylim=c(0,max(density(PlotData[,i])$y)*1.15),\n     xlab=xlab)\nlines(density(PlotData[,i]), lwd=1, lty='solid', col='black')}\n\nrequire(plotrix)\nAGC_cor<-cor(PlotData)\n??radial.plot\nradial.plot(AGC_cor,labels=colnames(AGC_cor),rp.type=\"p\",radlab=TRUE,grid.bg=\"transparent\",\n            main=\"Pearson's correlation for study variables\",line.col=c(\"#000000\",\"#696969\",\"green\",\"red\",\"blue\",\"yellow\"),\n            grid.col=\"black\",show.grid=T,lwd=2,lty=c(1,2,3,4,5,6),\n            radial.lim=c(-1,1))\npar(xpd=T)\nlegend(1.6,-1.25,c(\"Ht\",\"BA\",\"CA\",\"Vob\",\"Vib\",\"LiDAR_Ht\"),lty=c(1,2,3,4,5,6),lwd=2,col=c(\"#000000\",\"#696969\",\"green\",\"red\",\"blue\",\"yellow\"))\npar(xpd=FALSE)\n",
    "created" : 1421872589341.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3192614002",
    "id" : "F41E2F8B",
    "lastKnownWriteTime" : 1421881690,
    "path" : "C:/00_CFJ_paper/00_Scripts/09_plot_hist.r",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled26"
    },
    "source_on_save" : false,
    "type" : "r_source"
}