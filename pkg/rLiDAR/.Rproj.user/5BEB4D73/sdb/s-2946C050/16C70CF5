{
    "contents" : "###--------------------------------------------------------------------------------------------------------###\n#----------------------------------------------------------------------------------------------------------###\n# SILVA, C. A. (2013)                                                                                      ###\n# Forester and Master's degree                                                                             ### \n# Ph.D Student at University of Idaho                                                                      ###\n# Rocky Mountain Reserach Station- RMRS                                                                    ###\n# US Forest Service - USDA                                                                                 ###\n# Moscow - Idaho                                                                                           ###\n# carlos_engflorestal@outlook.com.br                                                                       ###\n# Skype: flowds                                                                                            ###\n#----------------------------------------------------------------------------------------------------------###\n#----------------------------------------------------------------------------------------------------------###\n#           Individual tree detection - Ichauway_LiDAR - CJF 2014\n#----------------------------------------------------------------------------------------------------------###\n#----------------------------------------------------------------------------------------------------------###\n\n#----------------------------------------------------------------------------------------------------------###\n# 01 require packages\n#----------------------------------------------------------------------------------------------------------###\nrequire(maptools)\n\n#----------------------------------------------------------------------------------------------------------###\n# 02 - Import field biomass\n#----------------------------------------------------------------------------------------------------------###\nFieldInventory <- readShapePoints(\"C:\\\\00_CFJ_paper\\\\01_Processing\\\\03_TreeDetection\\\\TreeFieldSelected_xy.shp\")\n\n# convert shp to dataframe\nFieldInventory<-as.data.frame(FieldInventory)\nhead(FieldInventory)\n\n# Field variables\n#Ht<-FieldInventory$mHmax\n#DBH<-FieldInventory$DBH\n#BA<-FieldInventory$BA\n#CA<-FieldInventory$CA # from excel equation\n#CR<-FieldInventory$CR # from excel equation\n#CW<- 3.75105 - 0.17919*Ht + 0.01241*(Ht^2) # from popescu\n#CA<- pi*((CW/2)^2)\n#summary(CA)\n\n#Vob<-FieldInventory$Vob1\n#Vib<-FieldInventory$Vib1\n\n# LiDAR variables\n#HmaxL<-FieldInventory$Hmax_1\n#HmeanL<-FieldInventory$height\n#CAL<-pi*(sqrt(FieldInventory$Shape_Area/pi)^2)\n#CAL<-FieldInventory$Shape_Area\n#CWL<- 3.75105 - 0.17919*HmaxL + 0.01241*(HmaxL^2)\n#CAL<- pi*((CWL/2)^2)\n#summary(CAL)\n\n# plot\nwindows()\nplot(Ht,HmaxL)\nplot(Ht,HmeanL)\nplot(DBH,HmaxL)\nplot(BA,HmaxL)\nplot(CA,HmaxL)\nplot(CR,HmaxL)\nplot(Vob,HmaxL)\nplot(Vib,HmaxL)\n\n\n# remove outline\nFieldInventory<-FieldInventory[-c(148,159),]\nhead(FieldInventory)\n\n# Field variables\nHt<-FieldInventory$mHmax\nDBH<-FieldInventory$DBH\nBA<-FieldInventory$BA\nCA<-FieldInventory$CA\n#CR<-FieldInventory$CR\n#CW<- 3.75105 - 0.17919*Ht + 0.01241*(Ht^2)\n#CA<- pi*((CW/2)^2)\n#AGBt<-exp(0.058 - 3.571 + 0.997*log(Ht*DBH^2))\n#AGBf<-exp(-0.085 - 5.403 + 0.888*log(Ht*DBH^2))\n#AGBb<-exp(-0.054 - 7.319 + 1.76*log(Ht*DBH^2))\n#AGBs<-exp(0.074 - 3.730 + 0.991*log(Ht*DBH^2))\n\n#summary(AGBt)\n#summary(AGBb)\n\nplot(log(AGBt),Ht)\nplot(log(AGBf),Ht)\nplot(log(AGBb),Ht)\nplot(log(AGBs),Ht)\n\nsummary(CA)\n\nVob<-FieldInventory$Vob1\nVib<-FieldInventory$Vib1\n\n# LiDAR variables\nHmaxL<-FieldInventory$Hmax_1\n#HmeanL<-FieldInventory$height\n#CAL<-pi*(sqrt(FieldInventory$Shape_Area/pi)^2)\n#CAL<-FieldInventory$Shape_Area\nCWL<- 3.75105 - 0.17919*HmaxL + 0.01241*(HmaxL^2)\nCAL<- pi*((CWL/2)^2)\nsummary(CAL)\n\nwindows()\nplot(Ht,HmaxL)\nplot(Ht,HmeanL)\nplot(DBH,HmaxL)\nplot(BA,HmaxL)\nplot(CA,HmaxL)\nplot(CR,HmaxL)\nplot(Vob,HmaxL)\nplot(Vib,HmaxL)\n\n\n#----------------------------------------------------------------------------------------------------------###\n\n#----------------------------------------------------------------------------------------------------------###\n# 05 - Imputation modeling : 209 observation\n#----------------------------------------------------------------------------------------------------------###\nrequire(yaImpute)\ny<-cbind(Ht,log(BA),log(CA),Vob,Vib)\ncolnames(y)<-c(\"Ht\",\"log(BA)\",\"log(CA)\",\"Vob1\",\"Vib1\")\n\nx<-data.frame(HmaxL)\n\n# Run imputation models\n#install.packages(\"vegan\")\n#require(vegan)\nk=1\neuc=yai(x=x, y=y, method=\"euclidean\", k=k, ann=F)\ngnn=yai(x=x, y=y, method=\"gnn\", k=k, ann=F)\nmal=yai(x=x, y=y, method=\"mahalanobis\", k=k, ann=F)\nmsn=yai(x=x, y=y, method=\"msn\", k=k, ann=F)\nmsn2=yai(x=x, y=y, method=\"msn2\", k=k, ann=F)\nrf=yai(x=x, y=y, method=\"randomForest\", k=k, ann=F)\n\n# the results can be plotted.\nwindows()\nplot(euc,vars=yvars(euc))\nplot(gnn,vars=yvars(gnn))\nplot(mal,vars=yvars(mal))\nplot(msn,vars=yvars(msn))\nplot(msn2,vars=yvars(msn2))\nplot(rf,vars=yvars(rf))\n\n# predicted values for the rf imputation model\nrforig <- impute(rf,ancillaryData=y)\ncolnames<-colnames(rforig)\nhead(rforig)\n\nrforig<-cbind(rforig[,1],exp(rforig[,2:3]),rforig[,4:6],exp(rforig[,7:8]),rforig[,9:10])\ncolnames(rforig)<-colnames\n\nhead(rforig)              \n# correlation   \ncor(rforig)\ncor(rforig[,1],rforig[,6]) # Ht\ncor(rforig[,2],rforig[,7]) # log(BA)\ncor(rforig[,3],rforig[,8]) # log(CA)\ncor(rforig[,4],rforig[,9]) # Vob1\ncor(rforig[,5],rforig[,10]) # Vib1\n# Absloute rmse\nrequire(hydroGOF)\nrmseHt<-rmse(rforig[,6],rforig[,1]);rmseHt \n#rmselogAGBt<-rmse(rforig[,2],rforig[,11]);rmselogAGBt\n#rmselogAGBf<-rmse(rforig[,3],rforig[,12]);rmselogAGBf\n#rmselogAGBb<-rmse(rforig[,4],rforig[,13]);rmselogAGBb\n#rmselogAGBs<-rmse(rforig[,5],rforig[,14]);rmselogAGBs\nrmseBA<-rmse(rforig[,7],rforig[,2]);rmselogBA\nrmseCA<-rmse(rforig[,8],rforig[,3]);rmselogCA\nrmseVob1<-rmse(rforig[,9],rforig[,4]);rmseVob1\nrmseVib1<-rmse(rforig[,10],rforig[,5]);rmseVib1\n\n# Relative rmse\nrmseR_Ht<-(rmseHt/mean(rforig[,6]))*100 ;rmseR_Ht # Ht\n#rmseR_logAGBt<-rmselogAGBt/mean(rforig[,11])*100 ;rmseR_logAGBt\n#rmseR_logAGBf<-(rmselogAGBf/exp(mean(rforig[,12])))*100 ;rmseR_logAGBf\n#rmseR_logAGBb<-(rmselogAGBb/mean(rforig[,13]))*100 ;rmseR_logAGBb\n#rmseR_logAGBs<-(rmselogAGBs/mean(rforig[,14]))*100 ;rmseR_logAGBs\nrmseR_BA<-(rmseBA/mean(rforig[,7]))*100 ;rmseR_BA\nrmseR_CA<-(rmseCA/mean(rforig[,8]))*100 ;rmseR_CA\nrmseR_Vob1<-(rmseVob1/mean(rforig[,9]))*100 ;rmseR_Vob1\nrmseR_Vib1<-(rmseVib1/mean(rforig[,10]))*100 ;rmseR_Vib1\n\n# MBE\n(MBE_Ht <- mean(rforig[,6]) - mean(rforig[,1]))\n(MBE_BA <- mean(rforig[,7]) - mean(rforig[,2]))\n(MBE_CA <- mean(rforig[,8]) - mean(rforig[,3]))\n(MBE_Vob1 <- mean(rforig[,9]) - mean(rforig[,4]))\n(MBE_Vib1 <- mean(rforig[,10]) - mean(rforig[,5]))\n# r2\nlibrary(miscTools)\n(r2_Ht <- rSquared(rforig[,6], rforig[,6] - rforig[,1]))\n(r2_BA <- rSquared(rforig[,7], rforig[,7] - rforig[,2]))\n(r2_CA <- rSquared(rforig[,8], rforig[,8] - rforig[,3]))\n(r2_Vob <- rSquared(rforig[,9], rforig[,9] - rforig[,4]))\n(r2_Vib1 <- rSquared(rforig[,10], rforig[,10] - rforig[,5]))\n\n# equivalence plot\nrequire(equivalence)\n\n# Ht\nequivalence.xyplot(rforig[,6] ~ rforig[,1],\n                   alpha=0.05, b0.ii=0.25, b1.ii=0.25, ylim=c(0,max(rforig[,1])*1.2), \n                   xlim=c(0,max(rforig[,1])*1.2),main=\"\" ,type=\"p\",lwd=5, pch=50, \n                   xlab=\"Height (Ht) Imputed - (m)\", ylab=\" Height (Ht) observed (m)\")\n\n#BA\nequivalence.xyplot(rforig[,7] ~ rforig[,2],\n                   alpha=0.05, b0.ii=0.25, b1.ii=0.25, ylim=c(0,max(rforig[,2])*1.2), \n                   xlim=c(0,max(rforig[,2])*1.2),main=\"\" ,type=\"p\",lwd=5, pch=50, \n                   xlab=\"Basal area (BA) Imputed - (m2)\", ylab=\" Basal area (BA) observed (m)\")\n\n# CA\nequivalence.xyplot(rforig[,8] ~ rforig[,3],\n                   alpha=0.05, b0.ii=0.25, b1.ii=0.25, ylim=c(0,max(rforig[,3])*1.2), \n                   xlim=c(0,max(rforig[,3])*1.2),main=\"\" ,type=\"p\",lwd=5, pch=50, \n                   xlab=\"Canopy projected area (CA) Imputed - (m2)\", ylab=\" Canopy projected area (CA) observed (m2)\")\n\n# Vob\nequivalence.xyplot(rforig[,9] ~ rforig[,4],\n                   alpha=0.05, b0.ii=0.25, b1.ii=0.25, ylim=c(0,max(rforig[,5])*1.2), \n                   xlim=c(0,max(rforig[,5])*1.2),main=\"\" ,type=\"p\",lwd=5, pch=50, \n                   xlab=\" Stem volume outside-bark (Vob) Imputed - (m3)\", ylab=\" Stem volume outside-bark (Vob) observed - (m3)\")\n\n# Vob\nequivalence.xyplot(rforig[,10] ~ rforig[,5],\n                   alpha=0.05, b0.ii=0.25, b1.ii=0.25, ylim=c(0,max(rforig[,5])*1.2), \n                   xlim=c(0,max(rforig[,5])*1.2),main=\"\" ,type=\"p\",lwd=5, pch=50, \n                   xlab=\" Stem volume inside-bark (Vob) Imputed - (m3)\", ylab=\" Stem volume inside-bark (Vob) observed - (m3)\")\n\n\n\n\nplotSelfValidation = function(model, actual, predicted, rmsdLoc=NULL, Title=NULL, x_axis=NULL, y_axis=NULL)\n{\n  par(oma=(c(0,1,0,0))) #increases the left margin by 1 line\n  par(mgp=(c(2.5,1,0))) #determines where the axis labels are in relation to the axis\n  maxValue = ifelse(max(predicted)>= max(actual), max(predicted), max(actual))\n  plot(predicted, actual, main=Title, xlab=x_axis, ylab=y_axis, cex.lab=1.5, cex.main=1.5,\n       xlim=c(0,maxValue), ylim=c(0,maxValue), col=\"white\", cex=1.3)\n  z=lm(formula =  actual ~ predicted,)\n  a=predict(z, interval=\"confidence\")\n  a=a[order(a[,1]),]\n  predicted_sort=sort(predicted) \n  xx= c(predicted_sort,sort(predicted_sort, decreasing = TRUE))\n  yy= c(a[,2], sort(a[,3], decreasing = TRUE))\n  polygon(xx,yy, col = \"grey75\", border = NA) #draw 95%CI\n  abline(0,1, lty=5, lwd=2, col=\"red\") #1:1 line\n  abline(z, lwd=2, col=\"black\")   #best fit line\n  text(0, 0.82*maxValue, labels = paste(\"y = \", round(z$coefficients[2],2), \" x + \", round(z$coefficients[1],2)), adj =0, cex=1.3)\n  text(0, 0.77*maxValue, labels = expression(paste(R^2)), adj =0, cex=1.3)       #first part of r-squared\n  text(0.045*maxValue, 0.76*maxValue, labels = paste(\" =\", round(summary(z)$adj.r.squared,2)), adj =0, cex=1.3) #second part of r-squared\n  text(0, 0.71*maxValue, labels = paste(\"MBE = \", round(mean(predicted) - mean(actual),0)), adj =0, cex=1.3)\n  text(maxValue, 0.1*maxValue, labels = paste(\"RMSD = \", round(rmsd(imp)[rmsdLoc,1],1)), adj =1, cex=1.3)\n  text(maxValue, 0.05*maxValue, labels = paste(\"RMSD Normalized Mean = \", round(rmsd(imp)[rmsdLoc,1]/mean(actual) * 100, 1), \"%\"), adj=1, cex=1.3)\n  text(maxValue, 0, labels = paste(\"RMSD Normalized Range = \", round(rmsd(imp)[rmsdLoc,1]/(max(actual) - min(actual)) * 100, 1), \"%\"), adj=1, cex=1.3)\n  \n  if(!is.element(rownames(rmsd(imp))[rmsdLoc],vars(model)$yvars)) text(0, 0.70*maxValue,labels = \"Imputed as Ancillary Variable\", adj=0, cex=1.3)\n  \n  \n  points(predicted, actual) #replots the points so they are on top\n  legend(x=-0.03*maxValue, y=1.00*maxValue, legend=\"Line of best fit\", lty = 1, lwd=2, col=\"black\", bty=\"n\", cex=1.3) #linear regression\n  legend(x=-0.03*maxValue, y=0.94*maxValue, legend=\"1:1 Line\", lty = 5, lwd=2, col=\"red\", bty=\"n\", cex=1.3) #1:1 line\n}\n\n\n\n#example\n\n#----- PREF_2011 -----\nimp=rforig\nrmsd(imp)\nwindows()\nplotSelfValidation(rf, rforig[,6],rforig[,1], rmsdLoc=1, Title=\"Tree Height validation\", x_axis=\"Imputed Ht (m)\",y_axis=\" Observed Ht (m)\" )\nplotSelfValidation(rf, rforig[,7],rforig[,2], rmsdLoc=2, Title=\"Tree basal area (BA) validation\",x_axis=\"Imputed BA (m2/tree)\",y_axis=\" Observed BA (m2/tree)\" )\nplotSelfValidation(rf, rforig[,8],rforig[,3], rmsdLoc=3, Title=\"Tree canopy area (CA) validation\",x_axis=\"Imputed CA (m2/tree)\",y_axis=\" Observed BA (m2/tree)\" )\nplotSelfValidation(rf, rforig[,9],rforig[,4], rmsdLoc=4, Title=\"Tree stem volume outside-bark (Vob) validation\",x_axis=\"Imputed Vob (m3/tree)\",y_axis=\" Observed Vob (m3/tree)\" )\nplotSelfValidation(rf, rforig[,10],rforig[,5], rmsdLoc=5, Title=\"Tree stem volume inside-bark (Vib) validation\",x_axis=\"Imputed Vib (m3/tree)\",y_axis=\" Observed Vib (m3/tree)\")\n\n\nwin.graph(50,20)\npar(mfrow=c(1,5))\n# boxplot LiDAR metrics\nHtb<-cbind(rforig[,1],rforig[,6])\ncolnames(Htb)<-c(\"Imputed\",\"observed\")\nrb<-boxplot(Htb, main=\" Tree Height (Ht)\", ylab= \"Height (m)\", col=\"forestgreen\")\nmn.t<-c(colMeans(Htb))\nsd.t<-c(sd(Htb[,1]),sd(Htb[,2]))\nxi <- 0.3 + seq(rb$n)\npoints(xi, mn.t, col = \"red\", pch = 8)\narrows(xi, mn.t - sd.t, xi, mn.t + sd.t,\n       code = 3, col = \"gray\", angle = 45, length = .1)\n#legend(\"topleft\", legend = c(\"* = Average\",\"<----> Standard deviation\"), bty=\"n\")\n\nBAb<-cbind(rforig[,2],rforig[,7])\ncolnames(BAb)<-c(\"Imputed\",\"observed\")\nrb<-boxplot(BAb, main=\"Tree basal area (BA)\", ylab= \"BA (m2)\", col=\"forestgreen\")\nmn.t<-c(colMeans(BAb))\nsd.t<-c(sd(BAb[,1]),sd(BAb[,2]))\nxi <- 0.3 + seq(rb$n)\npoints(xi, mn.t, col = \"red\", pch = 8)\narrows(xi, mn.t - sd.t, xi, mn.t + sd.t,\n       code = 3, col = \"gray\", angle = 45, length = .1)\n#legend(\"topleft\", legend = c(\"* = Average\",\"<----> Standard deviation\"), bty=\"n\")\n\nCAb<-cbind(rforig[,3],rforig[,8])\ncolnames(CAb)<-c(\"Imputed\",\"observed\")\nrb<-boxplot(CAb, main=\"Tree canopy area (CA)\", ylab= \"CA (m2)\", col=\"forestgreen\")\nmn.t<-c(colMeans(CAb))\nsd.t<-c(sd(CAb[,1]),sd(CAb[,2]))\nxi <- 0.3 + seq(rb$n)\npoints(xi, mn.t, col = \"red\", pch = 8)\narrows(xi, mn.t - sd.t, xi, mn.t + sd.t,\n       code = 3, col = \"gray\", angle = 45, length = .1)\n#legend(\"topleft\", legend = c(\"* = Average\",\"<----> Standard deviation\"), bty=\"n\")\n\nVobb<-cbind(rforig[,4],rforig[,9])\ncolnames(Vobb)<-c(\"Imputed\",\"observed\")\nrb<-boxplot(Vobb, main=\"Tree stem volume \noutside-bark (Vob)\", ylab= \"Vob (m3)\", col=\"forestgreen\")\nmn.t<-c(colMeans(Vobb))\nsd.t<-c(sd(Vobb[,1]),sd(Vobb[,2]))\nxi <- 0.3 + seq(rb$n)\npoints(xi, mn.t, col = \"red\", pch = 8)\narrows(xi, mn.t - sd.t, xi, mn.t + sd.t,\n       code = 3, col = \"gray\", angle = 45, length = .1)\n#legend(\"topleft\", legend = c(\"* = Average\",\"<----> Standard deviation\"), bty=\"n\")\n\nVibb<-cbind(rforig[,5],rforig[,10])\ncolnames(Vibb)<-c(\"Imputed\",\"observed\")\nrb<-boxplot(Vibb, main=\"Tree stem volume \ninside-bark (Vib)\", ylab= \"Vib (m3)\", col=\"forestgreen\")\nmn.t<-c(colMeans(Vibb))\nsd.t<-c(sd(Vibb[,1]),sd(Vibb[,2]))\nxi <- 0.3 + seq(rb$n)\npoints(xi, mn.t, col = \"red\", pch = 8)\narrows(xi, mn.t - sd.t, xi, mn.t + sd.t,\n       code = 3, col = \"gray\", angle = 45, length = .1)\nlegend(locator(), legend = c(\"* = Average\",\"<----> Standard deviation\"), col=c(\"red\",\"gray\"), bty=\"n\")\n",
    "created" : 1421872640314.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "416819062",
    "id" : "16C70CF5",
    "lastKnownWriteTime" : 1422238617,
    "path" : "C:/00_CFJ_paper/00_Scripts/04_ImputationBiomassaModeling_2.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}