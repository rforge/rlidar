{
    "contents" : "#'LiDAR 3D stand visualization of trees\n#'\n#'@description LiDAR 3D stand visualization of trees. This function was adapted from MAESPA package,see\n#'\\code{\\link{MAESPA}}.  \n#'\n#'@usage LiDARtrees3D(crownshape = \"halfellipsoid\", CL = 4, CW = 8, HCB = 10, \n#'                X = 0, Y = 0, dbh = 0.3, crowncolor = \"forestgreen\", \n#'                stemcolor = \"chocolate4\", resolution=\"high\", shape=TRUE) \n#'\n#'@param crownshape Tree crown shape: \"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\" or \"cylinder\". Defaul is \"halfellipsoid\"\n#'@param CL Tree crown height\n#'@param CW Tree crown diameter\n#'@param HCB Tree trunk height\n#'@param X X Tree location\n#'@param Y Y Tree location\n#'@param dbh Tree stem diameter\n#'@param crowncolor Tree crown color\n#'@param stemcolor Tree stem color\n#'@param resolution Tree crown resolution: \"low\", \"median\" and \"high\"\n#'@param shape TRUE return a interpolate tree crown shape  \n#'\n#'@return returns Single 3D tree \n#'@author Carlos Alberto Silva and Remko Duursma\n#'@references \\url{http://maespa.github.io/},\n#'@examples\n#'\n#'\\dontrun{\n#'\n#'#' EXAMPLE 01: Plotting isolate trees\n#'\n#'#' shape cone crown \n#'open3d() \n#'PlotStand3D(crownshape = \"cone\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'                        stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'                        \n#'#' elliptois crown shape \n#'open3d()\n#'PlotStand3D(crownshape = \"ellipsoid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'                        stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'                        \n#'#' halfellipsoid crown shape \n#'open3d()\n#'PlotStand3D(crownshape = \"halfellipsoid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'                        stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'                        \n#'#' paraboloid crown shape \n#'open3d()\n#'PlotStand3D(crownshape = \"paraboloid\", CL = 10, CW =7, \n#'            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n#'                        stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'  \n#'                                              \n#'#'EXAMPLE 02: Plotting plantation forest stands\n#' \n#'#' Set the lenght of the stand\n#'xlenght<-30 # x lenght\n#'ylenght<-20 # y lenght\n#'\n#'#' Set the space between trees\n#'sx<-3 # x space lengh\n#'sy<-2 # y space lenght\n#'\n#'#'#' Tree location grid\n#'XYgrid <- expand.grid(x = seq(1,xlenght,sx), y = seq(1,ylenght,sy))\n#'\n#'#' Get the number of trees\n#'Ntrees<-nrow(XYgrid)\n#'\n#'#'Plotting a Eucalyptus plantation stand using halfellipsoid for the tree crown shape\n#'\n#'#' Set stand trees parameters\n#'meanHCB<-5 # mean tree crown base heigh\n#'sdHCB<-0.1 # standard deviation tree crown base heigh\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\n#'CL<-HCB # tree crown heigh\n#'CW<-HCB*0.6 # tree crown diameter\n#'\n#'open3d() # open a rgl window\n#'\n#'#'Plot stand\n#'for( i in 1:Ntrees){\n#'  PlotStand3D(crownshape = \"halfellipsoid\", CL = CL[i], CW = CW[i], \n#'              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = \"forestgreen\", \n#'                            stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'                            }\n#'                            \n#'#' Plot parameters\n#'axes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\n#'title3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n#'\n#'\n#'#'Plotting a Eucalyptus plantation stand using halfellipsoid for the tree crown shape\n#'\n#'#'Set stand trees parameters\n#'meanHCB<-3 # mean tree crown base heigh\n#'sdHCB<-0.1 # standard deviation tree crown base heigh\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\n#'CL<-HCB*2.0 # tree crown heigh\n#'CW<-HCB*1.3 # tree crown diameter\n#'\n#'open3d() # open a rgl window\n#'#' Plot stand\n#'for( i in 1:Ntrees){\n#'  PlotStand3D(crownshape = \"cone\", CL = CL[i], CW = CW[i], \n#'              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = \"forestgreen\", \n#'                            stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'                            }\n#'                            \n#'#' Plot parameters\n#'axes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\n#'title3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n#'\n#'\n#'#' EXAMPLE 03: Plotting natural mixed forest stands \n#'\n#'#' Difers species of trees on the stand using diferents crown shapes\n#'\n#'#' Set the number of trees\n#'Ntrees<-80 \n#'\n#'# Set the trees locations\n#'xcoord<-sample(1:100,Ntrees) # x coord\n#'coord<-sample(1:100,Ntrees) # x coord\n#'\n#'#'#' Set a location grid of trees \n#'XYgrid<-cbind(xcoord,ycoord)\n#'\n#'#' plot the location of the trees\n#'plot(XYgrid, main=\"Tree location\")\n#'\n#'meanHCB<-7 # mean tree crown base heigh\n#'sdHCB<-3 # standard deviation tree crown base heigh\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\n#'crownshape<-sample(c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\"), Ntrees, replace=T) # tree crown shape \n#'CL<-HCB*1.3 # tree crown heigh\n#'CW<-HCB # tree crown diameter\n#'\n#'open3d() # open a rgl window\n#'#'Plot stand\n#'\n#'for( i in 1:Ntrees){\n#'  PlotStand3D(crownshape = crownshape[i], CL = CL[i], CW = CW[i], \n#'              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = \"forestgreen\", \n#'                          stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'                          }\n#'                          \n#'#' Plot parameters\n#'axes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\n#'title3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n#'\n#'\n#'#' Difers trees height on the stand using diferents crown colors\n#'\n#'#'Set the number of trees\n#'Ntrees<-80 \n#'\n#'#' Set the trees locations\n#'xcoord<-sample(1:100,Ntrees) # x coord\n#'ycoord<-sample(1:100,Ntrees) # x coord\n#'\n#'#'Set a location grid of trees \n#'XYgrid<-cbind(xcoord,ycoord)\n#'\n#'#'plot the location of the trees\n#'plot(XYgrid, main=\"Tree location\")\n#'\n#'meanHCB<-7 # mean tree crown base heigh\n#'sdHCB<-3 # standard deviation tree crown base heigh\n#'HCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\n#'crownshape<-sample(c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\"), Ntrees, replace=T) # tree crown shape \n#'CL<-HCB*1.3 # tree crown heigh\n#'CW<-HCB # tree crown diameter\n#'\n#'#'Plot tree hiegh based on the HCB quantiles\n#'HCBq<-quantile(HCB) # HCB quantiles\n#'crowncolor<-NA*(1:Ntrees) # set a empty crowncolor vector\n#'\n#'#'classify trees by HCB quantile\n#'for (i in 1:Ntrees){\n#'  if (HCB[i] <= HCBq[2]) {crowncolor[i]<-\"red\"} # group 1\n#'  if (HCB[i] > HCBq[2] & HCB[i] <= HCBq[3] ) {crowncolor[i]<-\"blue\"}  # group 2\n#'  if (HCB[i] > HCBq[3] & HCB[i] <= HCBq[4] ) {crowncolor[i]<-\"yellow\"}  # group 3\n#'  if (HCB[i] >= HCBq[4]) {crowncolor[i]<-\"dark green\"}  # group 4\n#'  }\n#'    \n#'  open3d() # open a rgl window\n#'#' Plot stand\n#'for( i in 1:Ntrees){  \n#'  PlotStand3D(crownshape = crownshape[i], CL = CL[i], CW = CW[i], \n#'    HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = crowncolor[i], \n#'    stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n#'    }\n#'    \n#'#' Plot parameters\n#'axes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\n#'title3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\n#'planes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n#'}\n#' \n#'@export\nLiDARtrees3D<-function (crownshape = c(\"cone\", \"ellipsoid\",  \n                                      \"halfellipsoid\", \"paraboloid\", \"cylinder\"), CL = 4, CW = 8, \n                       HCB = 10, X = 0, Y = 0, dbh = 0.3, crowncolor = \"forestgreen\", \n                       stemcolor = \"chocolate4\", resolution=\"high\",shape=TRUE, ...) \n{\n  \n  \n  if (resolution==\"low\"){nz<-15;nalpha<-15}\n  if (resolution==\"median\"){nz<-25;nalpha<-25}\n  if (resolution==\"high\"){nz<-40;nalpha<-40}\n  \n  if ( shape==TRUE) {\n    \n  shape <- match.arg(crownshape)\n\n  H <- HCB + CL\n  dbase <- dbh * (H/(H - 1.3))\n  if (!is.finite(dbase)) \n    dbase <- dbh\n  \n  \n  m1 <- coord3dshape(shape, CW = CW, CL = CL, z0 = HCB, x0 = X, \n                                        y0 = Y, nz = nz, nalpha = nalpha)\n  m2 <- coord3dshape(\"cone\", CW = dbase, CL = H, z0 = 0, x0 = X, \n                      y0 = Y, nz = nz, nalpha = nalpha)\n  \n  interpol(m1, col = crowncolor, ...)\n  interpol(m2, col = stemcolor, ...)\n  \n  } else {\n    TreesModel(crownshape=crownshape, CW = CW, CL = CL, z0 = 0,HCB=HCB, x0 = X, \n                     y0 = Y, nz = nz, nalpha = nalpha, dbh = dbh,crowncolor = crowncolor, \n               stemcolor = stemcolor)\n  }\n  \n  \n}\n\ncoord3dshape <- function(crownshape=c(\"cone\",\"ellipsoid\",\"halfellipsoid\",\"paraboloid\",\"cylinder\"),\n                         nz=5, nalpha=5, CL=1, CW=1, x0=0, y0=0, z0=0\n){\n\n  crownshape <- match.arg(crownshape)\n  \n  z <- rep(seq(0,1,length=nz),each=nalpha)\n  angs <- rep(seq(0,2*pi, length=nalpha),nz)\n\n  if(crownshape == \"cone\")distfun <- (1-z)\n  if(crownshape == \"ellipsoid\")distfun <- sqrt(1 - ((z-1/2)^2)/((1/2)^2))\n  if(crownshape == \"halfellipsoid\")distfun <- sqrt(1 - z**2)\n  if(crownshape == \"paraboloid\")distfun <- sqrt(1-z)\n  if(crownshape == \"cylinder\")distfun <- 1\n  \n  \n  r <- CW/2\n  x <- x0 + r*distfun*cos(angs)\n  y <- y0 + r*distfun*sin(angs)\n  z <- z0 + z*CL\n  \n  keep <- !duplicated(cbind(x,y,z))\n  x <- x[keep]\n  y <- y[keep]\n  z <- z[keep]\n  return(matrix(cbind(x,y,z),ncol=3))\n}\n\nTreesModel<- function(crownshape=c(\"cone\",\"ellipsoid\",\"halfellipsoid\",\"paraboloid\",\"cylinder\"),\n                                   nz=5, nalpha=5, CL=5, CW=5, HCB=10, x0=0, y0=0, z0=0, dbh = 0.3, crowncolor = \"forestgreen\", \n                                      stemcolor = \"chocolate4\"\n){\n  \n crownshape <- match.arg(crownshape)\n  \n  z <- rep(seq(0,1,length=nz),each=nalpha)\n  angs <- rep(seq(0,2*pi, length=nalpha),nz)\n\n  if(crownshape == \"cone\")distfun <- (1-z)\n  if(crownshape == \"ellipsoid\")distfun <- sqrt(1 - ((z-1/2)^2)/((1/2)^2))\n  if(crownshape == \"halfellipsoid\")distfun <- sqrt(1 - z**2)\n  if(crownshape == \"paraboloid\")distfun <- sqrt(1-z)\n  if(crownshape == \"cylinder\")distfun <- 1\n  H <- HCB + CL\n  r <- CW/2\n  x <- x0 + r*distfun*cos(angs)\n  y <- y0 + r*distfun*sin(angs)\n  z <- z0 + HCB + z*CL\n  \n  keep <- !duplicated(cbind(x,y,z))\n  x <- x[keep]\n  y <- y[keep]\n  z <- z[keep]\n  klj=matrix(cbind(x,y,z),ncol=3)\n  \n  mMatrix<-matrix(,ncol=3)[-1,]\n  \n  for ( i in 1:nrow(klj)){\n    ln=i+nz\n    \n    if ( ln >= nrow(klj)) { ln2=nrow(klj) } else { ln2= ln}\n    \n    mMatrix<-rbind(mMatrix,rbind(klj[i,],klj[ln2,])) }\n  \n  \n  kljzbase=subset(klj,klj[,3]==z[2])\n  kljzbaseNew<-matrix(,ncol=3)[-1,]\n  \n  for ( i in 1:nrow(kljzbase)){\n    kljzbaseNew<-rbind(kljzbaseNew,rbind(kljzbase[i,],c(x0,y0,HCB)))\n    \n  }\n  \n  newList<-rbind(kljzbaseNew,mMatrix,klj)\n  plot3d(newList, type=\"l\", col=crowncolor, add=T)\n  m2 <- coord3dshape(\"cone\", CW = dbh, CL = H, z0 = z0, x0 = x0, \n                     y0 = y0, nz = 50, nalpha = 50)\n  interpol(m2, col = stemcolor)\n  \n}\n\n\ninterpol<- function(input,col) {\n  surf.3d <- t(convhulln(input,options = \"QJ\")) \n  rgl.triangles(input[surf.3d,1],input[surf.3d,2],input[surf.3d,3],col=col,alpha = c(1.0),\n                lit = TRUE,ambient = \"black\",specular = \"white\",emission = \"black\",shininess = 50.0,\n                smooth = TRUE, texture = NULL,front = \"fill\",back =\"fill\",fog = F) \n}\n",
    "created" : 1415689732899.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3730094340",
    "id" : "2E92AFD1",
    "lastKnownWriteTime" : 1415866787,
    "path" : "~/rLiDAR/rLiDAR/R/PlotStand3D.R",
    "project_path" : "R/PlotStand3D.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}