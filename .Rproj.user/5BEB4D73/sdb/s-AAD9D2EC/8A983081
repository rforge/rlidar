{
    "contents" : "\n#require(sp)\n#require(spatstat)\n#require(rgdal)\n#require(rgeos)\n#require(deldir)\n#require(plyr)\n#require(maptools)\n#require(raster)\n\ninstall.packages(\"C:/Users/Carlos/Documents/rLiDAR/rLiDAR_1.0.tar.gz\", repos=NULL, dependencies=TRUE, type=\"source\")\n\nrequire(rLiDAR)\nchmR<-readGDAL('H:\\\\00_LiDAR\\\\00_LiDAR_projetos\\\\02_Ichauway_LiDAR\\\\04_WRITING\\\\01_Paper01\\\\02_processing\\\\02_CHM_pit-free\\\\Plot_pit-freeCHM01.asc')\n\n#chm<-raster(chmR)\n#save(chm, file=\"C:\\\\Users\\\\Carlos\\\\Documents\\\\rLiDAR\\\\rLiDAR\\\\chm.rda\")\n#prompt(chm)\n#plot(raster(chmR))\n\n\n#'#' Importing the CHM file\ndata(chm) # or set a CHM. e.g. chm<-readGDAL(\"CHM_stand.asc\")\n\n#' Example 01: Smoothing CHM using gaussian filter\n\n#' Set the ws:\nws<-3 # dimention 3x3\n\n#' Set the filter type\nfilter<-\"gaussian\"\n\n#' Set the sigma value\nsigma<-0.6\n\n#' Smoothing CHM\nsCHM<-CHMsmoothing(chm, filter, ws, sigma)\n\n#' Plotting CHM smoothed\nplot(sCHM, main=paste(filter,\"filter and windows size\", paste0(ws,\"x\",ws)))\n     \n     \n     #' Example 02: Smoothing CHM using mean filter\n     \n     #' Set the ws:\n     ws<-5 # dimention 5x5\n     \n     #' Set the filter type\n     filter<-mean\n     \n     #' Smoothing CHM\n     sCHM<-CHMsmoothing(chm, filter, ws, sigma)\n     \n     #' Plotting CHM smoothed\n     plot(sCHM, main=paste(filter,\"filter and window size\", paste0(ws,\"x\",ws))\n          \n          \n          ## End(Not run)\ndata(chm)\nplot(chm)\n\n?CHMsmoothing\nLAS<-readLAS(file)\n\nMetrics<-LASmetrics(LAS,2,3)\n\nSmoothCHM<-CHMsmooth(chm,\"mean\",3)\n\n??sTreeCHM\nLocation<-TreeLocation(SmoothCHM,7,8);Location\n\nwindows()\nplot(SmoothCHM)\nplot(SpatialPoints(Location[,1:2]), add=T, col=\"red\")\n\n?ForestCAS\n\nTreeCanopy<-TreeCanopy(chm,Location,8,10,0.3)\n\nTreeCanopyPolygon<-TreeCanopy[[1]]\n\n\nplot(TreeCanopyPolygon)\nTreeCanopyList=TreeCanopy[[2]];TreeCanopyList\n\n\nwindows()\nplot(SmoothCHM)\nplot(SpatialPoints(TreeCanopyList[,1:2]), add=T, pch=\"*\", col=\"red\")\nplot(TreeCanopyPolygon, add=T)\n\n\nopen3d()\n\nfor ( i in 1:nrow(TreeCanopyList)) {\nPlot3Dtree(crownshape = \"cone\", CL = TreeCanopyList[i,3]*0.3 , CW = sqrt(TreeCanopyList[i,4])*2, \n                       HCB = TreeCanopyList[i,3]*0.7, X = TreeCanopyList[i,1], Y = TreeCanopyList[i,2], dbh = 0.3, crowncolor = \"forestgreen\", \n                       stemcolor = \"brown\", nz = 50, nalpha = 50) } \n\naxes3d(c(\"x-\", \"y-\"), col=\"gray\")\ntitle3d(xlab = \"UTM.Easting\", ylab = \"UTM.Northing\", col=\"black\")\n\nplanes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1)\naspect3d(1,1,0.5)\n\n\n\nrequire(rLiDAR)\n#' Importing the LiDAR-derived CHM file\ndata(chm) # or set a CHM. e.g. chm<-readGDAL(\"CHM_stand.asc\")\n\nsCHM<-CHMsmoothing(chm, filter=\"mean\", ws=3) # smoothing CHM\nloc<-sTreesCHM(sCHM, fws=5,htd=5) # or import a tree list\n\n#' Set the maxcrown parameter\nmaxcrown=10.0 # 10.0 meters\n\n#' Set the exclusion parameter\nexclusion=0.3\n\n#' Compute individual tree detection canopy area\ncanopy<-ForestCAS(sCHM,loc, maxcrown,exclusion)\n?deldir\n#' Getting the individual tree detection canopy area boundary\nboundaryTrees<-canopy[[1]]\n#' Plotting the individual tree canopy boundary over the CHM\nplot(chm) # plotting CHM\nplot(boundaryTrees, add=T, border='red', bg='transparent', asp=1) # plotting tree canopy boundary\n\n#' Getting the individual tree detection canopy area list\ncanopyList<-canopy[[2]]\nplot(SpatialPoints(canopyList[,1:2]),col=\"black\", add=T, pch=\"*\") # plotting CHM\n\n\n\n\n# EXAMPLE 01: Plotting isolate trees \n\n# shape cone crown \nopen3d() \nPlotStand3D(crownshape = \"cone\", CL = 10, CW =7, \n            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n            stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n\n# elliptois crown shape \nopen3d()\nPlotStand3D(crownshape = \"ellipsoid\", CL = 10, CW =7, \n            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n            stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n\n# halfellipsoid crown shape \nopen3d()\nPlotStand3D(crownshape = \"halfellipsoid\", CL = 10, CW =7, \n            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n            stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n\n# paraboloid crown shape \nopen3d()\nPlotStand3D(crownshape = \"paraboloid\", CL = 10, CW =7, \n            HCB = 5, X =0, Y = 0, dbh = 0.4, crowncolor = \"forestgreen\", \n            stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n\n\n# EXAMPLE 02: Plotting plantation forest stands \n\n# Set the lenght of the stand\nxlenght<-30 # x lenght\nylenght<-20 # y lenght\n\n# Set the space between trees\nsx<-3 # x space lengh\nsy<-2 # y space lenght\n\n# Tree location grid\nXYgrid <- expand.grid(x = seq(1,xlenght,sx), y = seq(1,ylenght,sy))\n\n# Get the number of trees\nNtrees<-nrow(XYgrid)\n\n# Plotting a Eucalyptus plantation stand using halfellipsoid for the tree crown shape\n\n# Set stand trees parameters\nmeanHCB<-5 # mean tree crown base heigh\nsdHCB<-0.1 # standard deviation tree crown base heigh\nHCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\nCL<-HCB # tree crown heigh\nCW<-HCB*0.6 # tree crown diameter\n\nopen3d() # open a rgl window\n\n# Plot stand\nfor( i in 1:Ntrees){\n  PlotStand3D(crownshape = \"halfellipsoid\", CL = CL[i], CW = CW[i], \n              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = \"forestgreen\", \n              stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n}\n\n# Plot parameters\naxes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\ntitle3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\nplanes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n\n\n# Plotting a Eucalyptus plantation stand using halfellipsoid for the tree crown shape\n\n# Set stand trees parameters\nmeanHCB<-3 # mean tree crown base heigh\nsdHCB<-0.1 # standard deviation tree crown base heigh\nHCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\nCL<-HCB*2.0 # tree crown heigh\nCW<-HCB*1.3 # tree crown diameter\n\nopen3d() # open a rgl window\n# Plot stand\nfor( i in 1:Ntrees){\n  PlotStand3D(crownshape = \"cone\", CL = CL[i], CW = CW[i], \n              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = \"forestgreen\", \n              stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n}\n\n# Plot parameters\naxes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\ntitle3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\nplanes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n\n\n# EXAMPLE 03: Plotting natural mixed forest stands \n\n# Difers species of trees on space using diferents crown shapes\n\n# Set the number of trees\nNtrees<-80 \n\n# Set the trees locations\nxcoord<-sample(1:100,Ntrees) # x coord\nycoord<-sample(1:100,Ntrees) # x coord\n\n# Set a location grid of trees \nXYgrid<-cbind(xcoord,ycoord)\n\n# plot the location of the trees\nplot(XYgrid, main=\"Tree location\")\n\n\nmeanHCB<-7 # mean tree crown base heigh\nsdHCB<-3 # standard deviation tree crown base heigh\nHCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\ncrownshape<-sample(c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\"), Ntrees, replace=T) # tree crown shape \nCL<-HCB*1.3 # tree crown heigh\nCW<-HCB # tree crown diameter\n\nopen3d() # open a rgl window\n# Plot stand\nfor( i in 1:Ntrees){\n  PlotStand3D(crownshape = crownshape[i], CL = CL[i], CW = CW[i], \n              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = \"forestgreen\", \n              stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n}\n\n# Plot parameters\naxes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\ntitle3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\nplanes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n\n\n# Difers trees height on the stand using diferents crown colors\n\n# Set the number of trees\nNtrees<-80 \n\n# Set the trees locations\nxcoord<-sample(1:100,Ntrees) # x coord\nycoord<-sample(1:100,Ntrees) # x coord\n\n# Set a location grid of trees \nXYgrid<-cbind(xcoord,ycoord)\n\n# plot the location of the trees\nplot(XYgrid, main=\"Tree location\")\n\nmeanHCB<-7 # mean tree crown base heigh\nsdHCB<-3 # standard deviation tree crown base heigh\nHCB<-rnorm(Ntrees, mean=meanHCB, sd=sdHCB) # tree crown base heigh\ncrownshape<-sample(c(\"cone\", \"ellipsoid\",\"halfellipsoid\", \"paraboloid\"), Ntrees, replace=T) # tree crown shape \nCL<-HCB*1.3 # tree crown heigh\nCW<-HCB # tree crown diameter\n\n# Plot tree hiegh based on the HCB quantiles\nHCBq<-quantile(HCB) # HCB quantiles\ncrowncolor<-NA*(1:Ntrees) # set a empty crowncolor vector\n\n# classify trees by HCB quantile\nfor (i in 1:Ntrees){\n  if (HCB[i] <= HCBq[2]) {crowncolor[i]<-\"red\"} # group 1\n  if (HCB[i] > HCBq[2] & HCB[i] <= HCBq[3] ) {crowncolor[i]<-\"blue\"}  # group 2\n  if (HCB[i] > HCBq[3] & HCB[i] <= HCBq[4] ) {crowncolor[i]<-\"yellow\"}  # group 3\n  if (HCB[i] >= HCBq[4]) {crowncolor[i]<-\"dark green\"}  # group 4\n}\n\n\nopen3d() # open a rgl window\n# Plot stand\nfor( i in 1:Ntrees){\n  \n  PlotStand3D(crownshape = crownshape[i], CL = CL[i], CW = CW[i], \n              HCB = HCB[i], X = XYgrid[i,1], Y = XYgrid[i,2], dbh = 0.4, crowncolor = crowncolor[i], \n              stemcolor = \"chocolate4\", resolution=\"high\", shape=T) \n}\n\n# Plot parameters\naxes3d(c(\"x-\",\"x-\", \"y-\",\"z\"), col=\"gray\") # axes\ntitle3d(xlab = \"Easting\", ylab = \"Northing\", zlab = \"Height\", col=\"red\") # title\nplanes3d(a=0,b=0,c=-1,d=0.0001,color=\"gray\",alpha=1) # set a terrain plane\n\n#save(chm, file=\"C:\\\\Users\\\\Carlos\\\\Documents\\\\rLiDAR\\\\rLiDAR\\\\chm.rda\")\n#prompt(chm)\n\n\nlibrary(knitr)\nlibrary(tools)\nnames(vignetteEngine(package = 'knitr'))\n?rLiDAR\n",
    "created" : 1412540985486.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1114498361",
    "id" : "8A983081",
    "lastKnownWriteTime" : 1415865797,
    "path" : "~/rLiDAR/runPackage.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}